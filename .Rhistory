import numpy as np
from wmwm import wmwm_test
np.random.seed(0)
X = np.random.normal(0, 1, 100)
Y = np.random.normal(1, 1, 100)
X[1:10] = np.nan
Y[1:5] = np.nan
result = wmwm_test(X, Y)
print(result['p_value'])
print(result['bounds_statistic'])
print(result['bounds_pvalue'])
print(result['alternative'])
print(result['ties_method'])
print(result['description_bounds'])
import numpy as np
import wmwm
from wmwm import wmwm_test
np.random.seed(0)
X = np.random.normal(0, 1, 100)
Y = np.random.normal(1, 1, 100)
X[1:10] = np.nan
Y[1:5] = np.nan
result = wmwm_test(X, Y)
print(result['p_value'])
print(result['bounds_statistic'])
print(result['bounds_pvalue'])
print(result['alternative'])
print(result['ties_method'])
print(result['description_bounds'])
import numpy as np
import sys
print(sys.version)
np.random.seed(0)
X = np.random.normal(0, 1, 100)
Y = np.random.normal(1, 1, 100)
X[1:10] = np.nan
Y[1:5] = np.nan
result = wmwm_test(X, Y)
print(result['p_value'])
print(result['bounds_statistic'])
print(result['bounds_pvalue'])
print(result['alternative'])
print(result['ties_method'])
print(result['description_bounds'])
import numpy as np
from wmwm import wmwm_test
np.random.seed(0)
X = np.random.normal(0, 1, 100)
Y = np.random.normal(1, 1, 100)
X[1:10] = np.nan
Y[1:5] = np.nan
result = wmwm_test(X, Y)
print(result['p_value'])
print(result['bounds_statistic'])
print(result['bounds_pvalue'])
print(result['alternative'])
print(result['ties_method'])
print(result['description_bounds'])
